name: deploy to lambda
on: [push]
jobs:
  deploy_source:
    name: build and deploy lambda
    strategy:
      matrix:
        node-version: [14.x]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: ls -la
        working-directory: ./src
      
      # - name: Use Node.js ${{ matrix.node-version }}
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: ${{ matrix.node-version }}
      # - name: npm install and build
      #   run: |
      #     npm ci
      #     npm run build --if-present
      #   env:
      #     CI: true
#       - name: zip
#         uses: montudor/action-zip@v0.1.0
#         with:
#           args: zip -qq -r ./welcome.zip index.js
#       - name: default deploy
#         uses: appleboy/lambda-action@master
#         with:
#           aws_access_key_id: ${{ secrets.AWS_ACCESS_REACT_KEY_ID }}
#           aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_REACT_KEY }}
#           aws_region: eu-west-1
#           function_name: demo
#           zip_file: welcome.zip












# name: React application build and deploy
# # on:
# #   push:
# #     branches:
# #       - main
# on:
#   # Triggers the workflow on push or pull request events but only for the main branch
#   push:
#     branches: [ '*' ]
#   pull_request:
#     branches: [ main ]
# jobs:
#   build:
#     name: Build
#     environment:
#       name: dev
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2
#     - name: Publish app for deploy
#       run: echo "Build"
#   staging:
#     needs: build
#     name: Deploy to staging
#     runs-on: ubuntu-latest
#     steps:
#     - name: Publish app for deploy
#       run: echo "Build"
#   deploy:
#     needs: staging
#     name: Deploy to production
#     runs-on: ubuntu-latest
#     steps:
#     - name: Publish app for deploy
#       run: echo "staging"
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         node-version: [12.x]
#     steps:
#       - uses: actions/checkout@v2
#       - name: Use Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v1
#         with:
#           node-version: ${{ matrix.node-version }}
#       - name: build the react app
#         run: npm ci --silent
#       - name: build the react app
#         run: npm run build
#       - name: rename main js
#         run: cd build && zip -r ../deploy.zip * && cd ..
#       - name: Get timestamp
#         uses: gerred/actions/current-time@master
#         id: current-time
#       - name: Run string replace
#         uses: frabert/replace-string-action@master
#         id: format-time
#         with:
#           pattern: '[:\.]+'
#           string: "${{ steps.current-time.outputs.time }}"
#           replace-with: "-"
#           flags: "g"
# #       - name: Beanstalk Deploy for app
# #         uses: einaregilsson/beanstalk-deploy@v10
# #         with:
# #           aws_access_key: ${{secrets.AWS_ACCESS_REACT_KEY_ID}}
# #           aws_secret_key: ${{secrets.AWS_SECRET_ACCESS_REACT_KEY}}
# #           application_name: "demo"
# #           environment_name: "Demo-env"
# #           region: "us-east-1"
# #           version_label: "react-demo-new-${{ steps.format-time.outputs.replaced }}"
# #           deployment_package: deploy.zip
#       - name: Deployed!
#         run:  echo React app deployment completed!!!!

#       - uses: jakejarvis/s3-sync-action@master
#         with:
#           args: --acl public-read --follow-symlinks --delete
#         env:
#           AWS_S3_BUCKET: 'jino.io'
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_REACT_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_REACT_KEY }}
#           AWS_REGION: 'us-east-1'   # optional: defaults to us-east-1
#           SOURCE_DIR: 'build'      # optional: defaults to entire repository
